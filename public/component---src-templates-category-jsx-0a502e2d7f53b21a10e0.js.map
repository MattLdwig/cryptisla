{"version":3,"sources":["webpack:///./src/templates/category.jsx","webpack:///./data/SiteConfig.js","webpack:///./src/layout/index.jsx","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["CategoryTemplate","render","category","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layout__WEBPACK_IMPORTED_MODULE_3__","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","config","siteTitle","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_4__","React","Component","pageQuery","siteTitleShort","siteTitleAlt","siteLogo","siteUrl","pathPrefix","siteDescription","siteRss","siteFBAppID","googleAnalyticsID","disqusShortname","postDefaultCategoryID","dateFromFormat","dateFormat","userName","userEmail","userTwitter","userLocation","userAvatar","userDescription","userLinks","label","url","iconClassName","icon","menuLink","name","link","copyright","themeColor","backgroundColor","replace","substr","slice","module","exports","MainLayout","children","content","PostListing","getPostList","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","displayDate","date","excerpt","timeToRead","react__WEBPACK_IMPORTED_MODULE_2___default","map","post","style","background","backgroundPosition","backgroundSize","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","key"],"mappings":"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","file":"component---src-templates-category-jsx-0a502e2d7f53b21a10e0.js","sourcesContent":["import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../layout\";\r\nimport PostListing from \"../components/PostListing/PostListing\";\r\nimport config from \"../../data/SiteConfig\";\r\n\r\nexport default class CategoryTemplate extends React.Component {\r\n  render() {\r\n    const { category } = this.props.pageContext;\r\n    const postEdges = this.props.data.allMarkdownRemark.edges;\r\n    return (\r\n      <Layout>\r\n        <div className=\"category-container\">\r\n          <Helmet\r\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\r\n          />\r\n          <PostListing postEdges={postEdges} />\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n/* eslint no-undef: \"off\" */\r\nexport const pageQuery = graphql`\r\n  query CategoryPage($category: String) {\r\n    allMarkdownRemark(\r\n      limit: 1000\r\n      sort: { fields: [fields___date], order: DESC }\r\n      filter: { frontmatter: { category: { eq: $category } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n            date\r\n          }\r\n          excerpt\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            tags\r\n            cover\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const config = {\r\n  siteTitle: \"Cryptisla\", // Site title.\r\n  siteTitleShort: \"Cryptisla\", // Short site title for homescreen (PWA). Preferably should be under 12 characters to prevent truncation.\r\n  siteTitleAlt: \"Cryptisla, le trading de cryptos pour débutants\", // Alternative site title for SEO.\r\n  siteLogo: \"/logos/logo.png\", // Logo used for SEO and manifest.\r\n  siteUrl: \"https://cryptisla.com\", // Domain of your website without pathPrefix.\r\n  pathPrefix: \"\", // Prefixes all links. For cases when deployed to example.github.io/gatsby-advanced-starter/.\r\n  siteDescription: \"Découvrir le trading de crypto-monnaies et la blockchain simplement.\", // Website description used for RSS feeds/meta description tag.\r\n  siteRss: \"/rss.xml\", // Path to the RSS file.\r\n  siteFBAppID: \"\", // FB Application ID for using app insights\r\n  googleAnalyticsID: \"UA-59515367-8\", // GA tracking ID.\r\n  disqusShortname: \"cryptisla\", // Disqus shortname.\r\n  postDefaultCategoryID: \"trading\", // Default category for posts.\r\n  dateFromFormat: \"YYYY-MM-DD\", // Date format used in the frontmatter.\r\n  dateFormat: \"DD/MM/YYYY\", // Date format for display.\r\n  userName: \"Cala\", // Username to display in the author segment.\r\n  userEmail: \"hello@cryptisla.com\", // Email used for RSS feed's author segment\r\n  userTwitter: \"\", // Optionally renders \"Follow Me\" in the UserInfo segment.\r\n  userLocation: \"\", // User location to display in the author segment.\r\n  userAvatar: \"https://api.adorable.io/avatars/150/test.png\", // User avatar to display in the author segment.\r\n  userDescription:\r\n    \"Yeah, I like animals better than people sometimes... Especially dogs. Dogs are the best. Every time you come home, they act like they haven't seen you in a year. And the good thing about dogs... is they got different dogs for different people.\", // User description to display in the author segment.\r\n  // Links to social profiles/projects you want to display in the author segment/navigation bar.\r\n  userLinks: [\r\n    {\r\n      label: \"Twitter\",\r\n      url: \"https://twitter.com/cryptisla\",\r\n      iconClassName: \"fa fa-twitter\",\r\n      icon: \"/icons/twitter.svg\"\r\n    },\r\n    {\r\n      label: \"Facebook\",\r\n      url: \"https://facebook.com/cryptisla\",\r\n      iconClassName: \"fa fa-envelope\",\r\n      icon: \"/icons/facebook.svg\"\r\n    }\r\n  ],\r\n  menuLink: [\r\n    {\r\n      name: 'home',\r\n      link: '/'\r\n    },\r\n    {\r\n      name: 'guides',\r\n      link: '/guides'\r\n    },\r\n    {\r\n      name: 'trading',\r\n      link: '/trading'\r\n    },\r\n    {\r\n      name: 'blockchain',\r\n      link: '/blockchain'\r\n    }\r\n  ],\r\n  copyright: \"Copyright © 2019. Cryptisla\", // Copyright string for the footer of the website and RSS feed.\r\n  themeColor: \"#c62828\", // Used for setting manifest and progress theme colors.\r\n  backgroundColor: \"#e0e0e0\" // Used for setting manifest background color.\r\n};\r\n\r\n// Validate\r\n\r\n// Make sure pathPrefix is empty if not needed\r\nif (config.pathPrefix === \"/\") {\r\n  config.pathPrefix = \"\";\r\n} else {\r\n  // Make sure pathPrefix only contains the first forward slash\r\n  config.pathPrefix = `/${config.pathPrefix.replace(/^\\/|\\/$/g, \"\")}`;\r\n}\r\n\r\n// Make sure siteUrl doesn't have an ending forward slash\r\nif (config.siteUrl.substr(-1) === \"/\")\r\n  config.siteUrl = config.siteUrl.slice(0, -1);\r\n\r\n// Make sure siteRss has a starting forward slash\r\nif (config.siteRss && config.siteRss[0] !== \"/\")\r\n  config.siteRss = `/${config.siteRss}`;\r\n\r\nmodule.exports = config;\r\n","import React from \"react\";\r\nimport Helmet from \"react-helmet\";\r\nimport config from \"../../data/SiteConfig\";\r\nimport \"./index.css\";\r\n\r\nexport default class MainLayout extends React.Component {\r\n  render() {\r\n    const { children } = this.props;\r\n    return (\r\n      <div className=\"container\">\r\n        <Helmet>\r\n          <meta name=\"description\" content={config.siteDescription} />\r\n        </Helmet>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"gatsby\";\r\nimport './PostListing.css';\r\n\r\nclass PostListing extends React.Component {\r\n  getPostList() {\r\n    const postList = [];\r\n    this.props.postEdges.forEach(postEdge => {\r\n      postList.push({\r\n        path: postEdge.node.fields.slug,\r\n        tags: postEdge.node.frontmatter.tags,\r\n        cover: postEdge.node.frontmatter.cover,\r\n        title: postEdge.node.frontmatter.title,\r\n        displayDate: postEdge.node.frontmatter.date,\r\n        date: postEdge.node.fields.date,\r\n        excerpt: postEdge.node.excerpt,\r\n        timeToRead: postEdge.node.timeToRead\r\n      });\r\n    });\r\n    return postList;\r\n  }\r\n  render() {\r\n    const postList = this.getPostList();\r\n    return (\r\n      <div className=\"post-listing__container\">\r\n        {/* Your post list here. */\r\n        postList.map(post => {\r\n          const style = {background: 'url(' + post.cover + ')', backgroundPosition: 'top', backgroundSize: 'cover'}\r\n          if (post === postList[0]) {\r\n            return (\r\n            <Link to={post.path} key={`${post.title}_post`} className=\"post-card__link__hero\">\r\n              <div className=\"post-card__hero\" style={style} key={post.title}>\r\n              <div className=\"post-card__overlay\">\r\n                <p className=\"post-card__complementary\">\r\n                  <span className=\"post-card__tag\">{post.tags}</span>\r\n                </p> \r\n                <div className=\"post-card__info\">\r\n                  <h1 className=\"post-card__hero-title\">{post.title}</h1>\r\n                  <span className=\"post-card__date\">{post.displayDate}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n            )   \r\n          } else if (post === postList[1] || post === postList[2]) {\r\n            return (\r\n              <Link to={post.path} key={`${post.title}_post`} className=\"post-card__link-col\">\r\n              <div className=\"post-card__hero__col\" style={style} key={post.title}>\r\n                <div className=\"post-card__overlay\">\r\n                  <p className=\"post-card__complementary\">\r\n                    <span className=\"post-card__tag\">{post.tags}</span>\r\n                  </p> \r\n                  <div className=\"post-card__info\">\r\n                    <h1 className=\"post-card__hero-title\">{post.title}</h1>\r\n                    <span className=\"post-card__date\">{post.displayDate}</span>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n              </Link>\r\n            )\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostListing;\r\n"],"sourceRoot":""}